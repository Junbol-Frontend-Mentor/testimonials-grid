/* Import fonts from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

/* @import url(...): The CSS @import rule is used to import style rules from other style sheets.

https://fonts.googleapis.com/css2: This is the base URL for Google Fonts.

family=Poppins: Specifies that you want to import the Poppins font family.

wght@100..900: Requests all the available font weights for Poppins, from the thinnest weight of 100 to the boldest weight of 900.

display=swap: Adds a font display strategy that tells the browser to use a fallback font until the imported font is fully downloaded, which helps with content rendering speed and improves Cumulative Layout Shift scores. */

/*-----CSS RESET: -Universal selector to reset default browser styles-----*/

* {
  margin: 0px;
  padding: 0px;
  margin-top: 0px;
  margin-bottom: 0px;
  box-sizing: border-box;
}
/*-----declaring the root pseudo-class to use global color variables  styles to use them across the html doc-----*/
/* DON'T USE UNDERSCORE IN THE VARIABLE NAMES ONLY DASH */
:root {
  --color-Red: hsl(0, 78%, 62%); /* Primary*/
  --color-Turquoise: hsl(180, 62%, 55%); /* Primary*/
  --color-Orange: hsl(34, 97%, 64%); /* Primary*/
  --color-Blue: hsl(212, 86%, 64%); /* Primary*/
  --color-Dark-Blue-Gray: hsl(234, 12%, 34%);
  --color-Light--Blue-Gray: hsl(229, 6%, 66%);
  --color-Red: hsl(0, 82%, 43%);
  --color-White: hsl(0, 0%, 100%);
  --color-Black: hsl(0, 0%, 0%);
}

/* Decorative styles */ /* Query for mobiles */

/* --------------MOBILE FIRST------------ */

html,
body {
  display: flex;
  flex-direction: column;
  min-height: 100vh; /* This ensures that the total height is at least the height of the viewport */
  margin: 0;
  padding: 0;
  background-color: var(--color-Cream);
}

main {
  flex: 1 0 auto; /* This allows the main content to grow and shrink but not shrink smaller than its content */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  padding: 1rem;
  background-color: var(--color-Cream);
}

.sectionContainer {
  display: flex;
  flex-direction: column;
  width: 100%;
  min-height: 1000px; /* Use min-height to accommodate varying content sizes */
  justify-content: center;
  align-items: center;
  margin-bottom: 2rem;
  padding: 1rem;
  background-color: var(--color-White);
  /* background-color: blueviolet; */
}

.heading {
  width: 100%;
  display: flex;
  flex-direction: column;
  text-align: center;
  /* background-color:aquamarine; */
  margin-bottom: 2rem;
}

.headingCard {
  width: 100%;
  height: 10rem;
  display: flex;
  flex-direction: column;
  text-align: center;
  /* background-color:darkgreen; */
  margin-bottom: 2rem;
}

img {
  width: 4rem;
  /* height: auto; */
}

.gridContainer {
  display: grid;
  grid-template-columns: repeat(auto-fill, 100%); /*creates 1 column track for mobiles*/
  /* background-color: dimgray; */
}

.card {
  width: 100%;
  height: 300px; /* this will prevent to be stretched when used in desktop displays*/
  display: flex;
  flex-direction: column;
 justify-content: space-between;
  border-radius: 15px;
  padding: 1.5rem;
  background-color: var(--color-White);
  /* background-color:cornflowerblue; */
  margin-bottom: 2rem;
  box-shadow: 0 0 10px var(--color-Light--Blue-Gray);
}

.card.topBorderSupervisor {
  border-top: 0.5rem solid var(--color-Turquoise);
}
.card.topBorderTeamBuilder {
  border-top: 0.5rem solid var(--color-Red);
}
.card.topBorderKarma {
  border-top: 0.5rem solid var(--color-Orange);
}
.card.topBorderCalculator {
  border-top: 0.5rem solid var(--color-Blue);
}

figure {
  margin-bottom: 1rem;
  /* background-color: aqua; */
}

.icon {
  display: flex;
  justify-content: right;
  /* margin-bottom: 1rem; */
  /* background-color: chartreuse; */
}

h1 {
  font-family: 'Poppins', serif;
  font-weight: 700;
  font-size: 1.7rem;
  margin-bottom: 1.5rem;
  font-kerning: normal;
  color: var(--color-Dark-Turquoise);
  /* background-color: aqua; */
}

h2 {
  font-family: 'Poppins', serif;
  font-weight: 200;
  margin-bottom: -0.5rem;
  font-size: 1.55em;
  letter-spacing: 0.2em;
  font-kerning: normal;
  letter-spacing: 0.05em; /*for letter tracking*/
  color: var(--color-Dark-Blue-Gray);
  margin-top: 1rem;
}
h3 {
  font-family: 'Poppins', sans-serif;
  font-weight: 600;
  font-size: 2rem;
  font-kerning: normal;
  color: var(--color-Blac);
}

p {
  font-family: 'Poppins', serif;
  font-weight: 400;
  font-size: 1rem;
  color: var(--color-Light--Blue-Gray);
  margin-bottom: 2rem;
}

footer {
  font-family: 'Outfit', sans-serif;
  display: flex;
  justify-content: center;
  margin-bottom: 2rem;
}

.attribution {
  text-align: center;
  margin-bottom: 2rem; /* Keeps the footer at the bottom but only after all other content */
}
.attribution a {
  color: hsl(228, 45%, 44%);
  text-decoration: none;
}

/* --------------MEDIA QUERIES------------ */

/* --------------DESKTOP------------ */
@media (min-width: 450px) {
  .sectionContainer {
    width: 100%;
    max-width: 1400px; /* This should be the max-width of the section container if needed */
    margin: 0 auto; /* This centers the .sectionContainer */
  }

  .gridContainer {
    width: 100%;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr; /* Three equal columns */
    grid-auto-rows: minmax(
      300px,
      auto
    ); /* Sets the minimum and maximum height for all auto-generated grid rows.
    Each row will be at least 300px tall and will grow as needed to fit the content. */
    gap: 20px; /* Adjust the gap between grid items */
    align-items: start; /* Aligns all items to the start of their respective rows */
  }

  .card1 {
    grid-column: 1;
    align-self: center; /* Vertically centers Card 4 in the third column */
  }

  .card2 {
    grid-column: 2;
    grid-row: 1; /* Card 2 in the first row of the second column */
  }

  .card3 {
    grid-column: 2;
    grid-row: 2; /* Card 3 in the second row of the second column */
  }

  .card4 {
    grid-column: 3;
    align-self: center; /* Vertically centers Card 4 in the third column */
  }

  .card {
    width: 100%; /*this needs to be 100% to be able to be centered horizontally*/
  }

  /*-------This next code extends the element to cover two grid rows. This is useful for vertically centering
   or giving more space to an item in a grid layout. 'auto' starts the span at the next available row.
   This CSS rule means that any element with the class .span-row will occupy two rows in the grid. The auto part indicates that the spanning should start at the row where the element would naturally be placed based on the flow of the document and grid placement rules. The span 2 part tells the grid layout that the element should span across two rows starting from where it begins. This is particularly useful for creating layouts where certain elements need to stand out by covering more vertical space. Thanks to the fixed height the card doesn't stretched.------- */

  .span-row {
    grid-row: auto / span 2;
  }

  h1 {
    font-size: 2rem;
  }

  h2 {
    font-size: 1.8rem;
  }

 
}
